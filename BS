/**
 * Leetcode Problem: 4. Median of Two Sorted Arrays
 * Difficulty: Hard
 * 
 * Problem Statement:
 * Given two sorted arrays nums1 and nums2 of size m and n respectively,
 * return the median of the two sorted arrays.
 * The overall run time complexity should be O(log (m+n)). 
 * 
 * Note:
 * This implementation uses a simple merge approach with O(m + n) time complexity
 * for clarity, rather than the optimized binary search approach.
 * 
 * Approach:
 * - Merge both sorted arrays into a single sorted array.
 * - If the merged array has odd length, return the middle element.
 * - If the merged array has even length, return the average of the two middle elements.
 */

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        vector<int> nums3; // Merged array
        
        int n1 = nums1.size();
        int n2 = nums2.size();
        int i = 0; // Pointer for nums1
        int j = 0; // Pointer for nums2
        
        // Merge the two sorted arrays
        while(i < n1 && j < n2){
            if(nums1[i] < nums2[j]){
                nums3.push_back(nums1[i++]);
            } else {
                nums3.push_back(nums2[j++]);
            }
        }
        
        // Append any remaining elements from nums1
        while(i < n1){
            nums3.push_back(nums1[i++]);
        }
        
        // Append any remaining elements from nums2
        while(j < n2){
            nums3.push_back(nums2[j++]);
        }
        
        int n = n1 + n2; // Total size of merged array
        
        // If total length is odd, return the middle element
        if(n % 2 == 1){
            return nums3[n / 2];
        }
        // If total length is even, return the average of the two middle elements
        else{
            return (nums3[n / 2 - 1] + nums3[n / 2]) / 2.0;
        }
    }
};
